// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravailPratique2.Models;

#nullable disable

namespace TravailPratique2.Migrations
{
    [DbContext(typeof(TravailPratique2EfCoreDbContext))]
    partial class TravailPratique2EfCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravailPratique2.Models.Historique", b =>
                {
                    b.Property<int>("HistoriqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoriqueId"));

                    b.Property<float?>("K")
                        .HasColumnType("real");

                    b.Property<int>("MedecinId")
                        .HasColumnType("int");

                    b.Property<string>("NomDuPatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resultat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistoriqueId");

                    b.HasIndex("MedecinId");

                    b.ToTable("Historiques");
                });

            modelBuilder.Entity("TravailPratique2.Models.Medecin", b =>
                {
                    b.Property<int>("MedecinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedecinId"));

                    b.Property<bool>("Autre")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Femme")
                        .HasColumnType("bit");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Homme")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedecinId");

                    b.ToTable("Medecins");
                });

            modelBuilder.Entity("TravailPratique2.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<bool>("Autre")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Femme")
                        .HasColumnType("bit");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Homme")
                        .HasColumnType("bit");

                    b.Property<int>("MedecinId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("MedecinId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("TravailPratique2.Models.Performance", b =>
                {
                    b.Property<int>("PerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceId"));

                    b.Property<int>("K")
                        .HasColumnType("int");

                    b.Property<float>("TauxDeReconnaissance")
                        .HasColumnType("real");

                    b.HasKey("PerformanceId");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("TravailPratique2.Models.Prediction", b =>
                {
                    b.Property<int>("PredictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredictionId"));

                    b.Property<bool>("B")
                        .HasColumnType("bit");

                    b.Property<bool>("M")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<float>("area_worst")
                        .HasColumnType("real");

                    b.Property<string>("diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<float>("perimeter_mean")
                        .HasColumnType("real");

                    b.Property<float>("perimeter_worst")
                        .HasColumnType("real");

                    b.Property<float>("points_mean")
                        .HasColumnType("real");

                    b.Property<float>("points_worst")
                        .HasColumnType("real");

                    b.Property<float>("radius_worst")
                        .HasColumnType("real");

                    b.Property<string>("resultat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PredictionId");

                    b.HasIndex("PatientId");

                    b.ToTable("Predictions");
                });

            modelBuilder.Entity("TravailPratique2.Models.Historique", b =>
                {
                    b.HasOne("TravailPratique2.Models.Medecin", "Medecin")
                        .WithMany()
                        .HasForeignKey("MedecinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medecin");
                });

            modelBuilder.Entity("TravailPratique2.Models.Patient", b =>
                {
                    b.HasOne("TravailPratique2.Models.Medecin", "Medecin")
                        .WithMany()
                        .HasForeignKey("MedecinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medecin");
                });

            modelBuilder.Entity("TravailPratique2.Models.Prediction", b =>
                {
                    b.HasOne("TravailPratique2.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
